generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id String @id
  name String @unique
  users User[]
}

model Type {
  id String @id @default(uuid())
  name String @unique @db.VarChar(100)
  recipes TypeRecipe[]
}

model TypeRecipe {
  id String @id @default(uuid())
  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
  typeId String
  type Type @relation(fields: [typeId], references: [id])
}

model Ingredient {
  id String @id @default(uuid())
  name String @unique @db.VarChar(100)
  recipes IngredientRecipe[]
}

model Mood {
  id String @id @default(uuid())
  name String @unique @db.VarChar(100)
  recipes MoodRecipe[]
}

model Diet {
  id String @id @default(uuid())
  name String @unique @db.VarChar(100)
  recipes DietRecipe[]
}

model Origin {
  id String @id @default(uuid())
  name String @unique @db.VarChar(100)
  recipes OriginRecipe[]
}

model User {
  id String @id @default(uuid())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @unique @db.VarChar(100)
  password String @db.VarChar(60)
  profilePicture String? @db.VarChar(255)
  consent Boolean @default(false)
  roleId String @default("USER")
  role Role @relation(fields: [roleId], references: [id])
  recipes Recipe[]
  createdAt DateTime @default(now())
}

model Recipe {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  title String @db.VarChar(200)
  serve Int?
  ingredients IngredientRecipe[]
  description String? @db.Text
  instructions String @db.Text
  types TypeRecipe[]
  recipePicture String @db.VarChar(255)
  recipeUrl String? @db.VarChar(255)
  prepTime Int
  cookTime Int 
  moods MoodRecipe[]
  diets DietRecipe[]
  origins OriginRecipe[]
  status String @default("pending") @db.VarChar(20)
  createdAt DateTime @default(now())
}

model IngredientRecipe {
  id String @id @default(uuid())
  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
  ingredientId String
  ingredient Ingredient @relation(fields: [ingredientId], references: [id])
  quantity String @db.VarChar(50)
}

model MoodRecipe {
  id String @id @default(uuid())
  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
  moodId String
  mood Mood @relation(fields: [moodId], references: [id])
}

model DietRecipe {
  id String @id @default(uuid())
  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
  dietId String
  diet Diet @relation(fields: [dietId], references: [id])
}

model OriginRecipe {
  id String @id @default(uuid())
  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
  originId String
  origin Origin @relation(fields: [originId], references: [id])
}
